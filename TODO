* work out how to make a prompt work
* convert everything to use new_cell and rename it to cell
* add other stacks -- return, control -- and primitives to work with them etc
* implement if/else/then to also work in interp mode -- see [IF] etc in spec
* maybe add another flag to say "is only available in compilation state" and add it to such
  words like IF etc that are meaningless in interpreted mode and possibly have edge cases.
  then make do_colon check the flag before trying to run them and if they shouldn't be run
  then just no-op (and maybe print a warning)
* my CREATE is wrong -- it's supposed to call WORD itself, not expect to find the result of WORD
  already on the stack
* my WORD is still wrong -- it's supposed to just return a counted string address, no length lol
* my FIND is wrong -- should take a counted string, return xt and a flag for immediacy (see spec)
* debug primitives -- SHOWSTACK, SEE, ASSERT, etc
* proper test suite built around ASSERT



add error states for stack underflow and stack overflow, and make the stack_* functions fire
them off -- or make them call abort? think about this
ok how about:
    when parameter stack overflows or underflows:
    1. reinitialise parameter stack to empty
    2. set error state and error message to something sensible
    3. call QUIT
