#!/usr/bin/env perl

use warnings;
use strict;

my $ROOT = '__ROOT';

my @symbols = ( { name => 'ROOT', cname => $ROOT, 'link' => undef, type => undef } );
my $errors = 0;

while (<>) {
    my ($name, $cname, $link, $type) = ();

    # Parse definitions
    if (m/^\s*PRIMITIVE\s*\(\"?([^,]+?)\"?,\s*([^,]+),\s*([^,]+),\s*([^,]+)\s*\)\s*\{/) {
        ($name, undef, $cname, $link) = ($1, $2, $3, $4);
        $type = 'primitive';
    }
    elsif (m/^\s*VARIABLE\s*\(([^,]+),\s*([^,]+),\s*([^,]+)\s*\)\s*;/) {
        ($name, undef, $link) = ($1, $2, $3);
        $cname = "var_$name";
        $type = 'variable';
    }
    elsif (m/^\s*CONSTANT\s*\(([^,]+),\s*([^,]+),\s*([^,]+)\s*\)\s*;/) {
        ($name, undef, $link) = ($1, $2, $3);
        $cname = "const_$name";
        $type = 'constant';
    }
    else {
        next;
    }

    # Check coherence
    if ($link ne $symbols[0]->{cname}) {
        printf STDERR "%s:%d: warning: %s \"%s\" expected link to %s, got %s\n",
            $ARGV, $., $type, $name, $symbols[0]->{cname}, $link;

        if (scalar @symbols > 1) {  # There's always at least one, for the ROOT node
            print STDERR "$ARGV: note: The following previously-defined symbols ",
                         "may not be accessible:\n";

            foreach my $s (@symbols) {
                last if $s->{cname} eq $link or $s->{cname} eq $ROOT;
                print STDERR "$ARGV: note:    $s->{name} ($s->{type})\n";
            }
        }

        $errors ++;
    }

    # Add it to the list
    unshift @symbols, { name => $name, cname => $cname, 'link' => $link, type => $type };

} continue {
    close ARGV if eof;  # Reset line number $. for each file
}

exit $errors;
